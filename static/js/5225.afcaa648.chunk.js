"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[5225],{75225:(n,e,t)=>{t.r(e),t.d(e,{default:()=>a});const a='# GraphQL Schema Definition Language\n\n"""\nColor value\n"""\nscalar Color\n\n"""\nNode interface\n\n- allows (re)fetch arbitrary entity only by ID\n- allows client side cache normalization\n\nSee [Relay Global Object Identification Specification](https://facebook.github.io/relay/graphql/objectidentification.htm)\n"""\ninterface Node {\n  """\n  Globally unique identifier,\n  typically `${__typename}:${dbId}`\n  may be encoded in *base64*\n  """\n  id: ID!\n}\n\n"""\nA character in the Star Wars Trilogy\n"""\ninterface Character {\n  """\n  The id of the character.\n  """\n  id: ID!\n\n  """\n  The name of the character.\n  """\n  name: String\n\n  """\n  The friends of the character, or an empty list if they have none.\n  """\n  friends: [Character]\n\n  """\n  Which movies they appear in\n  """\n  appearsIn: [Episode]\n\n  """\n  All secrets about their past\n  """\n  secretBackstory: String\n}\n\n"""\nA mechanical creature in the Star Wars universe.\n"""\ntype Droid implements Character {\n  """\n  The id of the droid.\n  """\n  id: ID!\n\n  """\n  The name of the droid.\n  """\n  name: String\n\n  """\n  The friends of the droid, or an empty list if they have none.\n  """\n  friends: [Character]\n\n  """\n  Which movies they appear in.\n  """\n  appearsIn: [Episode]\n\n  """\n  Construction date and the name of the designer.\n  """\n  secretBackstory: String\n\n  """\n  The primary function of the droid.\n  """\n  primaryFunction: String\n\n  """\n  Chase color of the droid.\n  """\n  color: Color\n}\n\n# One of the films in the Star Wars Trilogy\nenum Episode {\n  """\n  Released in 1977.\n  """\n  NEWHOPE\n\n  """\n  Released in 1980.\n  """\n  EMPIRE\n\n  """\n  Released in 1983.\n  """\n  JEDI\n}\n\n"""\nA humanoid creature in the Star Wars universe.\n"""\ntype Human implements Character {\n  """\n  The id of the human.\n  """\n  id: ID!\n\n  """\n  The name of the human.\n  """\n  name: String\n\n  """\n  The friends of the human, or an empty list if they have none.\n  """\n  friends: [Character]\n\n  """\n  Which movies they appear in.\n  """\n  appearsIn: [Episode]\n\n  """\n  The home planet of the human, or null if unknown.\n  """\n  homePlanet: String\n\n  """\n  Where are they from and how they came to be who they are.\n  """\n  secretBackstory: String\n}\n\nenum LengthUnit {\n  METER\n  FEET\n}\n\ntype Starship {\n  id: ID!\n  name: String!\n  length(unit: LengthUnit = METER): Float\n}\n\nunion SearchResult = Human | Droid | Starship\n\ninput SearchInput {\n  name: String\n  episode: Episode\n}\n\n"""\nRoot Query\n"""\ntype Query {\n  """\n  Return the hero by episode.\n  """\n  hero(\n    """\n    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.\n    """\n    episode: Episode\n  ): Character\n\n  """\n  Return the Human by ID.\n  """\n  human(\n    """\n    id of the human\n    """\n    id: ID!\n  ): Human\n\n  """\n  Return the Droid by ID.\n  """\n  droid(\n    """\n    id of the droid\n    """\n    id: ID!\n  ): Droid\n\n  """\n  Search everything by name\n\n  __NOTE__: You should use Relay pagination\n  """\n  search(search: SearchInput!): [SearchResult]\n    @deprecated(reason: "`search` will be replaced.")\n}\n\n"""\nRoot Mutation\n"""\ntype Mutation {\n  """\n  Save the favorite episode.\n  """\n  favorite(\n    """\n    Favorite episode.\n    """\n    episode: Episode!\n  ): Episode\n}\n\n"""\nSubscriptions \u2014 live events\n"""\ntype Subscription {\n  """\n  Message\n  """\n  message: String\n}\n\nextend type Query {\n  """\n  Dummy query for highlighting test\n  """\n  dummy(\n    int: Int = 123\n    float: Float = 123.456\n    str: String = "Hello World!"\n    boolDefaultTrue: Boolean = true\n    boolDefaultFalse: Boolean = false\n    id: ID\n    search: SearchInput = null\n  ): Boolean\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\n# GraphQL Query Language\n\nquery dummyQuery($int: Int) {\n  dummy(int: $int)\n}\n\nmutation favoriteEpisode($episode: Episode) {\n  favorite(episode: $episode)\n}\n'}}]);
//# sourceMappingURL=5225.afcaa648.chunk.js.map