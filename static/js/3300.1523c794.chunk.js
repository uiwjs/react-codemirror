"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[3300],{83300:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});const l='`include "first_counter.v"\nmodule first_counter_tb();\n// Declare inputs as regs and outputs as wires\nreg clock, reset, enable;\nwire [3:0] counter_out;\n\n// Initialize all variables\ninitial begin\n  $display ("time\\t clk reset enable counter");\n  $monitor ("%g\\t %b   %b     %b      %b",\n    $time, clock, reset, enable, counter_out);\n  clock = 1;       // initial value of clock\n  reset = 0;       // initial value of reset\n  enable = 0;      // initial value of enable\n   #5  reset = 1;    // Assert the reset\n   #10  reset = 0;   // De-assert the reset\n   #10  enable = 1;  // Assert enable\n   #100  enable = 0; // De-assert enable\n   #5  $finish;      // Terminate simulation\nend\n\n// Clock generator\nalways begin\n   #5  clock = ~clock; // Toggle clock every 5 ticks\nend\n\n// Connect DUT to test bench\nfirst_counter U_counter (\nclock,\nreset,\nenable,\ncounter_out\n);\n\nendmodule\n'}}]);
//# sourceMappingURL=3300.1523c794.chunk.js.map