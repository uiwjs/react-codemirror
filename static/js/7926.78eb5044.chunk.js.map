{"version":3,"file":"static/js/7926.78eb5044.chunk.js","mappings":"yHAAA,ysC","sources":["../../node_modules/code-example/txt/sample.dart.txt"],"sourcesContent":["export default \"import 'dart:async';\\nimport 'dart:math' show Random;\\nmain() async {\\n  print('Compute π using the Monte Carlo method.');\\n  await for (var estimate in computePi().take(100)) {\\n    print('π ≅ $estimate');\\n  }\\n}\\n/// Generates a stream of increasingly accurate estimates of π.\\nStream<double> computePi({int batch: 100000}) async* {\\n  var total = 0;\\n  var count = 0;\\n  while (true) {\\n    var points = generateRandom().take(batch);\\n    var inside = points.where((p) => p.isInsideUnitCircle);\\n    total += batch;\\n    count += inside.length;\\n    var ratio = count / total;\\n    // Area of a circle is A = π⋅r², therefore π = A/r².\\n    // So, when given random points with x ∈ <0,1>,\\n    // y ∈ <0,1>, the ratio of those inside a unit circle\\n    // should approach π / 4. Therefore, the value of π\\n    // should be:\\n    yield ratio * 4;\\n  }\\n}\\nIterable<Point> generateRandom([int seed]) sync* {\\n  final random = Random(seed);\\n  while (true) {\\n    yield Point(random.nextDouble(), random.nextDouble());\\n  }\\n}\\nclass Point {\\n  final double x, y;\\n  const Point(this.x, this.y);\\n  bool get isInsideUnitCircle => x * x + y * y <= 1;\\n}\\n\";"],"names":[],"sourceRoot":""}