{"version":3,"file":"static/js/797.d13d3e4a.chunk.js","mappings":"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","sources":["pages/extensions/index.tsx","../../extensions/zebra-stripes/esm/index.js","pages/extensions/zebra-stripes/index.tsx","utils/useTheme.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const PageWarpper = styled.div`\n  flex: 1;\n  max-width: 980px;\n  padding: 20px 20px 30px 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Extensions = () => {};\n","import { Facet, RangeSetBuilder } from '@codemirror/state';\nimport { EditorView, Decoration, ViewPlugin } from '@codemirror/view';\nvar lineNumber = Facet.define({\n  combine: values => {\n    return values.length && Array.isArray(values) ? values.flat() : [];\n  }\n});\nvar stepSize = Facet.define({\n  combine: values => {\n    return values.length && Array.isArray(values) ? Math.min(...values) : 2;\n  }\n});\nvar stripe = Decoration.line({\n  attributes: {\n    class: 'cm-zebra-stripe'\n  }\n});\nfunction stripeDeco(view) {\n  var step = view.state.facet(stepSize);\n  var num = view.state.facet(lineNumber);\n  var builder = new RangeSetBuilder();\n  for (var {\n    from,\n    to\n  } of view.visibleRanges) {\n    for (var pos = from; pos <= to;) {\n      var line = view.state.doc.lineAt(pos);\n      if (line.number % step === 0 && num.length === 0) {\n        builder.add(line.from, line.from, stripe);\n      }\n      if (num.length > 0 && num.flat().includes(line.number)) {\n        builder.add(line.from, line.from, stripe);\n      }\n      pos = line.to + 1;\n    }\n  }\n  return builder.finish();\n}\nvar showStripes = ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.decorations = void 0;\n    this.decorations = stripeDeco(view);\n  }\n  update(update) {\n    this.decorations = stripeDeco(update.view);\n    // if (update.docChanged || update.viewportChanged) {\n    //   this.decorations = stripeDeco(update.view);\n    // }\n  }\n}, {\n  decorations: v => v.decorations\n});\nvar baseTheme = function baseTheme(opt) {\n  if (opt === void 0) {\n    opt = {};\n  }\n  return EditorView.baseTheme({\n    [\"&light .\" + opt.className]: {\n      backgroundColor: opt.lightColor || '#eef6ff'\n    },\n    [\"&dark .\" + opt.className]: {\n      backgroundColor: opt.darkColor || '#3a404d'\n    }\n  });\n};\nvar range = (start, stop, step) => Array.from({\n  length: (stop - start) / step + 1\n}, (_, i) => start + i * step);\nexport function zebraStripes(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var {\n    className = 'cm-zebra-stripe'\n  } = options;\n  stripe = Decoration.line({\n    attributes: {\n      class: className\n    }\n  });\n  if (options.lineNumber && Array.isArray(options.lineNumber)) {\n    options.step = null;\n    options.lineNumber = options.lineNumber.map(item => {\n      if (Array.isArray(item) && typeof item[0] === 'number' && typeof item[1] === 'number') {\n        return range(item[0], item[1], 1);\n      }\n      return item;\n    });\n  } else {\n    options.lineNumber = null;\n  }\n  var extensions = [options.lineNumber === null ? [] : lineNumber.of(options.lineNumber || []), options.step === null ? [] : stepSize.of(options.step || 2), showStripes];\n  if (className) {\n    var zebraStripeTheme = baseTheme({\n      lightColor: options.lightColor,\n      darkColor: options.darkColor,\n      className\n    });\n    extensions.push(zebraStripeTheme);\n  }\n  return extensions;\n}","import { FC, PropsWithChildren, useContext } from 'react';\nimport { Preview, MdContext } from '../../theme/Preview';\nimport { zebraStripes } from '@uiw/codemirror-extensions-zebra-stripes';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { useState } from 'react';\nimport { langs } from '@uiw/codemirror-extensions-langs';\nimport styled from 'styled-components';\nimport { PageWarpper } from '../';\nimport { useTheme } from '../../../utils/useTheme';\n\nconst OptionsView = styled.div`\n  padding-bottom: 24px;\n  display: flex;\n  gap: 18px;\n`;\n\nexport const ZebraStripesExample: FC<PropsWithChildren> = () => {\n  const { theme } = useTheme();\n  const [step, setStep] = useState(2);\n  const zebra = zebraStripes({ step: step });\n  const mdData = useContext(MdContext);\n  return (\n    <PageWarpper>\n      <CodeMirror\n        value={mdData.mdstr}\n        theme={theme}\n        height=\"300px !important\"\n        style={{ margin: '0 0 23px 0' }}\n        extensions={[langs.markdown(), zebra]}\n      />\n      <OptionsView>\n        <select value={step} onChange={(evn) => setStep(Number(evn.target.value))}>\n          <option value={1}>1</option>\n          <option value={2}>2</option>\n          <option value={3}>3</option>\n          <option value={4}>4</option>\n          <option value={5}>5</option>\n          <option value={6}>6</option>\n        </select>\n      </OptionsView>\n      <CodeMirror\n        value={mdData.mdstr}\n        theme={theme}\n        height=\"300px !important\"\n        style={{ margin: '0 0 23px 0' }}\n        extensions={[\n          langs.markdown(),\n          zebraStripes({\n            lineNumber: [1, [3, 6], 10],\n            lightColor: '#aca2ff33',\n            darkColor: '#aca2ff40',\n            className: 'xxx-text-wrapper',\n          }),\n        ]}\n      />\n    </PageWarpper>\n  );\n};\n\nexport const Component = () => {\n  return (\n    <Preview path={() => import('@uiw/codemirror-extensions-zebra-stripes/README.md')}>\n      <ZebraStripesExample />\n    </Preview>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { ReactCodeMirrorProps } from '@uiw/react-codemirror';\n\nexport function useTheme(name: ReactCodeMirrorProps['theme'] = 'light') {\n  const dark = document.documentElement.getAttribute('data-color-mode');\n  const [theme, setTheme] = useState<ReactCodeMirrorProps['theme']>(dark === 'dark' ? 'dark' : name);\n  useEffect(() => {\n    setTheme(document.documentElement.getAttribute('data-color-mode') === 'dark' ? 'dark' : 'light');\n    document.addEventListener('colorschemechange', (e) => {\n      setTheme(e.detail.colorScheme as ReactCodeMirrorProps['theme']);\n    });\n  }, []);\n  return { theme, setTheme };\n}\n"],"names":["PageWarpper","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","lineNumber","Facet","define","combine","values","length","Array","isArray","flat","stepSize","Math","min","stripe","Decoration","line","attributes","class","stripeDeco","view","step","state","facet","num","builder","RangeSetBuilder","from","to","visibleRanges","pos","doc","lineAt","number","add","includes","finish","showStripes","ViewPlugin","fromClass","constructor","this","decorations","update","v","zebraStripes","options","className","map","item","start","stop","_","i","range","opt","extensions","of","zebraStripeTheme","lightColor","darkColor","EditorView","baseTheme","backgroundColor","push","OptionsView","ZebraStripesExample","theme","useTheme","setStep","useState","zebra","mdData","useContext","MdContext","_jsxs","children","_jsx","CodeMirror","value","mdstr","height","style","margin","langs","markdown","onChange","evn","Number","target","Component","Preview","path","name","arguments","undefined","dark","document","documentElement","getAttribute","setTheme","useEffect","addEventListener","e","detail","colorScheme"],"sourceRoot":""}