{"version":3,"file":"static/js/9731.719fdfdb.chunk.js","mappings":"wPASO,MAAMA,EAAeA,KAC1B,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAkC,aAC3DC,EAAUC,IAAeF,EAAAA,EAAAA,WAAS,IACnC,MAAEG,IAAUC,EAAAA,EAAAA,KACZC,EAA8B,CAAC,EAQrC,MAPiB,aAAbP,IACFO,EAAMC,SAAWL,GAEF,aAAbH,IACFO,EAAMJ,SAAWA,IAIjBM,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAAAC,SAAA,EACVC,EAAAA,EAAAA,KAACC,EAAAA,IAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACTC,MCxBe,47CDyBfV,MAAOA,EACPW,OAAO,oBAGHT,GAAK,IACTU,MAAO,CAAEC,OAAQ,cACjBC,WAAY,CAACC,EAAAA,GAAMC,MAAOC,EAAAA,QAE5Bb,EAAAA,EAAAA,MAAA,OAAKQ,MAAO,CAAEM,aAAc,IAAKZ,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,UAAQe,KAAK,SAASC,QAASA,IAAMrB,GAAaD,GAAUQ,SAAA,CAAC,wBACpDe,OAAOvB,OAEhBM,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACEY,KAAK,QACLG,KAAK,OACLC,QAAsB,aAAb5B,EACTe,MAAM,WACNc,SAAUC,IAAA,IAAC,OAAEC,GAAQD,EAAA,OAAK7B,EAAY8B,EAAOhB,UAC5C,IAAI,eAGTN,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACEY,KAAK,QACLG,KAAK,OACLC,QAAsB,aAAb5B,EACTe,MAAM,WACNc,SAAUG,IAAA,IAAC,OAAED,GAAQC,EAAA,OAAK/B,EAAY8B,EAAOhB,UAC5C,IAAI,qBAQJkB,EAAYA,KAErBrB,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CAACC,KAAMA,IAAM,gCAAqDxB,UACxEC,EAAAA,EAAAA,KAACb,EAAY,K,kEE/DZ,MAAMW,EAAc0B,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4EAMdH,EAAAA,GAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,uC,kDCL1B,SAASjC,IAAyD,IAAhDqB,EAAmCc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAC7D,MAAMG,EAAOC,SAASC,gBAAgBC,aAAa,oBAC5C1C,EAAO2C,IAAY9C,EAAAA,EAAAA,UAAiD,SAAT0C,EAAkB,OAASjB,GAO7F,OANAsB,EAAAA,EAAAA,WAAU,KACRD,EAAsE,SAA7DH,SAASC,gBAAgBC,aAAa,mBAAgC,OAAS,SACxFF,SAASK,iBAAiB,oBAAsBC,IAC9CH,EAASG,EAAEC,OAAOC,gBAEnB,IACI,CAAEhD,QAAO2C,WAClB,C","sources":["pages/extensions/color/index.tsx","pages/extensions/color/code.ts","pages/extensions/index.tsx","utils/useTheme.tsx"],"sourcesContent":["import { color } from '@uiw/codemirror-extensions-color';\nimport CodeMirror, { ReactCodeMirrorProps } from '@uiw/react-codemirror';\nimport { useState } from 'react';\nimport { langs } from '@uiw/codemirror-extensions-langs';\nimport { Preview } from '../../theme/Preview';\nimport { useTheme } from '../../../utils/useTheme';\nimport { codeSample } from './code';\nimport { PageWarpper } from '..';\n\nexport const ColorExample = () => {\n  const [modeType, setModeType] = useState<'readOnly' | 'editable'>('readOnly');\n  const [readOnly, setReadOnly] = useState(false);\n  const { theme } = useTheme();\n  const porps: ReactCodeMirrorProps = {};\n  if (modeType === 'editable') {\n    porps.editable = readOnly;\n  }\n  if (modeType === 'readOnly') {\n    porps.readOnly = readOnly;\n  }\n\n  return (\n    <PageWarpper>\n      <CodeMirror\n        value={codeSample}\n        theme={theme}\n        height=\"400px !important\"\n        // editable={readOnly}\n        // readOnly={readOnly}\n        {...porps}\n        style={{ margin: '0 0 23px 0' }}\n        extensions={[langs.css(), color]}\n      />\n      <div style={{ marginBottom: 23 }}>\n        <button type=\"button\" onClick={() => setReadOnly(!readOnly)}>\n          编辑器 & {String(readOnly)}\n        </button>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={modeType === 'readOnly'}\n            value=\"readOnly\"\n            onChange={({ target }) => setModeType(target.value as any)}\n          />{' '}\n          readOnly\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={modeType === 'editable'}\n            value=\"editable\"\n            onChange={({ target }) => setModeType(target.value as any)}\n          />{' '}\n          editable\n        </label>\n      </div>\n    </PageWarpper>\n  );\n};\n\nexport const Component = () => {\n  return (\n    <Preview path={() => import('@uiw/codemirror-extensions-color/README.md')}>\n      <ColorExample />\n    </Preview>\n  );\n};\n","export const codeSample = `body {\n  color: red;\n  background-color: #333;\n}\n.header { color: purple; }\n.header { color: #ff4646; }\n.header { color: #167; }\n.header { color: rgb(0 133 160); }\n.header { color: rgb(0, 133, 160); }\n.header { color: rgba(0,  133,  160); }\n.header { color: rgba(0,  133,  160, .775); }\n.header { color: rgb(0 107 128 / 60%); }\n.header { color: hsl(190deg 100% 36% / 53%); }\n.good { color: hsl(240, 100%       50%); }\n.good { color: hsl(240, 100%, 50%); }\n.good { color: hsl(240, 100%, 50%, 0.1); }\n.good { color: hsl(240, 100%, 50%, 10%); }\n.good { color: hsl(240,100%,50%,0.1); }\n.good { color: hsl(180deg, 100%, 50%, 0.1); }\n.good { color: hsl(3.14rad, 100%, 50%, 0.1); }\n.good { color: hsl(200grad, 100%, 50%, 0.1); }\n.good { color: hsl(0.5turn, 100%, 50%, 0.1); }\n.good { color: hsl(-240, -100%, -50%, -0.1); }\n.good { color: hsl(+240, +100%, +50%, +0.1); }\n.good { color: hsl(240.5, 99.99%, 49.999%, 0.9999); }\n.good { color: hsl(.9, .99%, .999%, .9999); }\n.good { color: hsl(0240, 0100%, 0050%, 01); }\n.good { color: hsl(240.0, 100.00%, 50.000%, 1.0000); }\n.good { color: hsl(2400, 1000%, 1000%, 10); }\n.good { color: hsl(-2400.01deg, -1000.5%, -1000.05%, -100); }\n.good { color: hsl(2.40e+2, 1.00e+2%, 5.00e+1%, 1E-3); }\n.good { color: hsl(240 100% 50%); }\n.good { color: hsl(240 100% 50% / 0.1); }\n.good { color: hsla(240, 100%, 50%); }\n.good { color: hsla(240, 100%, 50%, 0.1); }\n.good { color: HSL(240Deg, 100%, 50%); }`;\n","import styled from 'styled-components';\n\nexport const PageWarpper = styled.div`\n  flex: 1;\n  max-width: 980px;\n  padding: 20px 20px 30px 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Extensions = () => {};\n","import { useEffect, useState } from 'react';\nimport { ReactCodeMirrorProps } from '@uiw/react-codemirror';\n\nexport function useTheme(name: ReactCodeMirrorProps['theme'] = 'light') {\n  const dark = document.documentElement.getAttribute('data-color-mode');\n  const [theme, setTheme] = useState<ReactCodeMirrorProps['theme']>(dark === 'dark' ? 'dark' : name);\n  useEffect(() => {\n    setTheme(document.documentElement.getAttribute('data-color-mode') === 'dark' ? 'dark' : 'light');\n    document.addEventListener('colorschemechange', (e) => {\n      setTheme(e.detail.colorScheme as ReactCodeMirrorProps['theme']);\n    });\n  }, []);\n  return { theme, setTheme };\n}\n"],"names":["ColorExample","modeType","setModeType","useState","readOnly","setReadOnly","theme","useTheme","porps","editable","_jsxs","PageWarpper","children","_jsx","CodeMirror","_objectSpread","value","height","style","margin","extensions","langs","css","color","marginBottom","type","onClick","String","name","checked","onChange","_ref","target","_ref2","Component","Preview","path","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","arguments","length","undefined","dark","document","documentElement","getAttribute","setTheme","useEffect","addEventListener","e","detail","colorScheme"],"sourceRoot":""}