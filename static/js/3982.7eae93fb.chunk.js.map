{"version":3,"file":"static/js/3982.7eae93fb.chunk.js","mappings":"sLAEA,SAASA,EAAWC,EAAMC,GACxB,IAAIC,EAAU,IAAIC,EAAAA,GAClB,IAAK,IAAI,KACPC,EAAI,GACJC,KACGL,EAAKM,cACR,IAAK,IAAIC,EAAMH,EAAMG,GAAOF,GAAK,CAC/B,IAAIG,EAAOR,EAAKS,MAAMC,IAAIC,OAAOJ,GACjC,GAAIN,EAAKW,KAA2B,oBAAbX,EAAKW,IAAoB,CAC9C,IAAIC,EAAMZ,EAAKW,IAAIJ,EAAKM,QACxB,GAAID,GAAsB,kBAARA,EAAkB,CAClC,IAAIE,EAAa,CACfC,MAAOH,GAETX,EAAQU,IAAIJ,EAAKJ,KAAMI,EAAKJ,KAAMa,EAAAA,GAAWT,KAAK,CAChDO,eAEJ,CACF,CACAR,EAAMC,EAAKH,GAAK,CAClB,CAEF,OAAOH,EAAQgB,QACjB,C,sEChBO,MAAMC,EAA0CA,KACrD,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,KACZC,GAASC,EAAAA,EAAAA,YAAWC,EAAAA,IAEpBC,EAAYC,EAAAA,GAAWC,UAAU,CACrC,oBAAqB,CAAEC,gBAAiB,OACxC,qBAAsB,CAAEA,gBAAiB,OACzC,oBAAqB,CAAEA,gBAAiB,QACxC,qBAAsB,CAAEA,gBAAiB,UAG3C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CAAAC,UACVF,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CACTC,MAAOX,EAAOY,MACdd,MAAOA,EACPe,OAAO,mBACPC,MAAO,CAAEC,OAAQ,cACjBC,WAAY,CACVC,EAAAA,GAAMC,WACNf,GDHgBgB,ECIN,CACR7B,IAAM8B,GACe,IAAfA,EACK,aAEU,IAAfA,EACK,kBADT,QDRI,IAAZD,IACFA,EAAU,CAAC,GAENE,EAAAA,GAAWC,UAAU,MAC1BC,WAAAA,CAAY7C,GACV8C,KAAKC,iBAAc,EACnBD,KAAKC,YAAchD,EAAWC,EAAMyC,EACtC,CACAO,MAAAA,CAAOA,IACDA,EAAOC,YAAcD,EAAOE,mBAC9BJ,KAAKC,YAAchD,EAAWiD,EAAOhD,KAAMyC,GAE/C,GACC,CACDM,YAAaI,GAAKA,EAAEJ,oBAfjB,IAAmBN,GCoBbW,EAAYA,KAErBvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAO,CAACC,KAAMA,IAAM,gCAAyDvB,UAC5EF,EAAAA,EAAAA,KAACV,EAAgB,K,kEC/ChB,MAAMW,EAAcyB,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4EAMdH,EAAAA,GAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,uC,kDCL1B,SAASrC,IAAyD,IAAhDuC,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAC7D,MAAMG,EAAOC,SAASC,gBAAgBC,aAAa,oBAC5C/C,EAAOgD,IAAYC,EAAAA,EAAAA,UAAiD,SAATL,EAAkB,OAASJ,GAO7F,OANAU,EAAAA,EAAAA,WAAU,KACRF,EAAsE,SAA7DH,SAASC,gBAAgBC,aAAa,mBAAgC,OAAS,SACxFF,SAASM,iBAAiB,oBAAsBC,IAC9CJ,EAASI,EAAEC,OAAOC,gBAEnB,IACI,CAAEtD,QAAOgD,WAClB,C","sources":["../../extensions/classname/esm/index.js","pages/extensions/classname/index.tsx","pages/extensions/index.tsx","utils/useTheme.tsx"],"sourcesContent":["import { RangeSetBuilder } from '@codemirror/state';\nimport { Decoration, ViewPlugin } from '@codemirror/view';\nfunction stripeDeco(view, opts) {\n  var builder = new RangeSetBuilder();\n  for (var {\n    from,\n    to\n  } of view.visibleRanges) {\n    for (var pos = from; pos <= to;) {\n      var line = view.state.doc.lineAt(pos);\n      if (opts.add && typeof opts.add === 'function') {\n        var cls = opts.add(line.number);\n        if (cls && typeof cls === 'string') {\n          var attributes = {\n            class: cls\n          };\n          builder.add(line.from, line.from, Decoration.line({\n            attributes\n          }));\n        }\n      }\n      pos = line.to + 1;\n    }\n  }\n  return builder.finish();\n}\nexport function classname(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return ViewPlugin.fromClass(class {\n    constructor(view) {\n      this.decorations = void 0;\n      this.decorations = stripeDeco(view, options);\n    }\n    update(update) {\n      if (update.docChanged || update.viewportChanged) {\n        this.decorations = stripeDeco(update.view, options);\n      }\n    }\n  }, {\n    decorations: v => v.decorations\n  });\n}","import { FC, PropsWithChildren, useContext } from 'react';\nimport { classname } from '@uiw/codemirror-extensions-classname';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { langs } from '@uiw/codemirror-extensions-langs';\nimport { EditorView } from '@codemirror/view';\nimport { Preview, MdContext } from '../../theme/Preview';\nimport { useTheme } from '../../../utils/useTheme';\nimport { PageWarpper } from '..';\n\nexport const ClassNameExample: FC<PropsWithChildren> = () => {\n  const { theme } = useTheme();\n  const mdData = useContext(MdContext);\n\n  const themeDemo = EditorView.baseTheme({\n    '&dark .first-line': { backgroundColor: 'red' },\n    '&light .first-line': { backgroundColor: 'red' },\n    '&dark .line-color': { backgroundColor: 'blue' },\n    '&light .line-color': { backgroundColor: 'blue' },\n  });\n\n  return (\n    <PageWarpper>\n      <CodeMirror\n        value={mdData.mdstr}\n        theme={theme}\n        height=\"300px !important\"\n        style={{ margin: '0 0 23px 0' }}\n        extensions={[\n          langs.markdown(),\n          themeDemo,\n          classname({\n            add: (lineNumber) => {\n              if (lineNumber === 3) {\n                return 'first-line';\n              }\n              if (lineNumber === 5) {\n                return 'line-color';\n              }\n            },\n          }),\n        ]}\n      />\n    </PageWarpper>\n  );\n};\n\nexport const Component = () => {\n  return (\n    <Preview path={() => import('@uiw/codemirror-extensions-classname/README.md')}>\n      <ClassNameExample />\n    </Preview>\n  );\n};\n","import styled from 'styled-components';\n\nexport const PageWarpper = styled.div`\n  flex: 1;\n  max-width: 980px;\n  padding: 20px 20px 30px 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Extensions = () => {};\n","import { useEffect, useState } from 'react';\nimport { ReactCodeMirrorProps } from '@uiw/react-codemirror';\n\nexport function useTheme(name: ReactCodeMirrorProps['theme'] = 'light') {\n  const dark = document.documentElement.getAttribute('data-color-mode');\n  const [theme, setTheme] = useState<ReactCodeMirrorProps['theme']>(dark === 'dark' ? 'dark' : name);\n  useEffect(() => {\n    setTheme(document.documentElement.getAttribute('data-color-mode') === 'dark' ? 'dark' : 'light');\n    document.addEventListener('colorschemechange', (e) => {\n      setTheme(e.detail.colorScheme as ReactCodeMirrorProps['theme']);\n    });\n  }, []);\n  return { theme, setTheme };\n}\n"],"names":["stripeDeco","view","opts","builder","RangeSetBuilder","from","to","visibleRanges","pos","line","state","doc","lineAt","add","cls","number","attributes","class","Decoration","finish","ClassNameExample","theme","useTheme","mdData","useContext","MdContext","themeDemo","EditorView","baseTheme","backgroundColor","_jsx","PageWarpper","children","CodeMirror","value","mdstr","height","style","margin","extensions","langs","markdown","options","lineNumber","ViewPlugin","fromClass","constructor","this","decorations","update","docChanged","viewportChanged","v","Component","Preview","path","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","name","arguments","length","undefined","dark","document","documentElement","getAttribute","setTheme","useState","useEffect","addEventListener","e","detail","colorScheme"],"sourceRoot":""}